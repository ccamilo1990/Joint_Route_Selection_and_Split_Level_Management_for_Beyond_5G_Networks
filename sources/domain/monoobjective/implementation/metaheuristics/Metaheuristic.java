package domain.monoobjective.implementation.metaheuristics;

import domain.EvaluationFunction;
import domain.monoobjective.MonoObjectiveAlgorithm;
import domain.monoobjective.MonoObjectiveSolution;
import domain.problem.ProblemInstance;
import java.util.Random;

/**
 *
 * @author cristian.erazo@cinvestav.mx
 * @param <T>
 */
public abstract class Metaheuristic<T extends MonoObjectiveSolution> implements MonoObjectiveAlgorithm<Integer[], Double> {

    /**
     * Random number generator
     */
    protected Random rand;
    /**
     * The number of iterations.
     */
    protected int numIterations;
    /**
     * The instance of the problem to be solved.
     */
    protected final ProblemInstance instance;
    /**
     * The objective/fitness function.
     */
    protected final EvaluationFunction<Double, T> fx;
    /**
     * *
     * The number of non-factible solutions generated by the algorithm.
     */
    protected long numNotValidSolutions;

    /**
     * The best solution found.
     */
    protected T best;

    public Metaheuristic(ProblemInstance instance, EvaluationFunction<Double, T> fx, Random rand, int numIterations) {
        this.fx = fx;
        this.rand = rand;
        this.instance = instance;
        this.numIterations = numIterations;
    }

    public long getNumNotValidSolutions() {
        return numNotValidSolutions;
    }

    public int getNumIterations() {
        return numIterations;
    }

    @Override
    public abstract MonoObjectiveSolution<Integer[], Double> run();
}
