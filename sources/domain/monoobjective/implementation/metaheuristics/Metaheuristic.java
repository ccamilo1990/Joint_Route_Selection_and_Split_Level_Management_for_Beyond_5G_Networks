package domain.monoobjective.implementation.metaheuristics;

import domain.EvaluationFunction;
import domain.monoobjective.MonoObjectiveAlgorithm;
import domain.monoobjective.MonoObjectiveSolution;
import domain.problem.ProblemInstance;
import java.util.Random;

/**
 *
 * @author cristian.erazo@cinvestav.mx
 * @param <T>
 */
public abstract class Metaheuristic<T extends MonoObjectiveSolution> implements MonoObjectiveAlgorithm<Integer[], Double> {

    /**
     *
     */
    protected Random rand;
    /**
     * The number of iterations.
     */
    protected int numIterations;
    /**
     * The instance of the problem to be solved.
     */
    protected final ProblemInstance instance;
    /**
     * The objective function.
     */
    protected final EvaluationFunction<Double, T> fx;
    /**
     * *
     * The number of non-factible solutions generated by the algorithm.
     */
    protected long numNotValidSolutions;

    /**
     * The best solution found.
     */
    protected T best;

    public Metaheuristic(ProblemInstance instance, EvaluationFunction<Double, T> fx, Random rand, int numIterations) {
        this.fx = fx;
        this.rand = rand;
        this.instance = instance;
        this.numIterations = numIterations;
    }

    public long getNumNotValidSolutions() {
        return numNotValidSolutions;
    }

    public int getNumIterations() {
        return numIterations;
    }

    @Override
    public abstract MonoObjectiveSolution<Integer[], Double> run();

    /**
     * This function determines if the solution "a" is better than the solution
     * "b".
     *
     * @param a The solution a.
     * @param b The solution b.
     * @return true if the solution "a" has a better objective function value
     * than the solution "b". false otherwise.
     */
    protected boolean isBetter(T a, T b) {
        double va, vb;
        va = fx.evaluate(a) + (a.getGn() * a.getGn());
        vb = fx.evaluate(b) + (b.getGn() * b.getGn());
        if (fx.isMaximization()) {
            if (a.getGn() > 0) {
                va *= -1.;
            }
            if (b.getGn() > 0) {
                vb *= -1.;
            }
            return va > vb;
        } else {
            return va < vb;
        }
    }
}
